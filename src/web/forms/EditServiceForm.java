package web.forms;

import java.util.HashMap;
import java.util.Map;


import web.beans.ComboxBean;
import web.beans.ServiceBean;
import web.classes.ComponentValidator;
import web.classes.PropertyManager;
import web.views.AbstractView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;

import database.dao.DaoIntrfc;
import database.pojo.Enumerations;

public class EditServiceForm extends Form {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private TextField nameTF;

	@AutoGenerated
	private TextField priceExcessTF;

	@AutoGenerated
	private Label priceExcessLB;

	@AutoGenerated
	private TextField priceDueTF;

	@AutoGenerated
	private Label priceDueLB;

	@AutoGenerated
	private TextField locationTF;

	@AutoGenerated
	private Label lacationLB;

	@AutoGenerated
	private TextField specialistTF;

	@AutoGenerated
	private Label specialistLB;

	@AutoGenerated
	private Label servicePerformedByLB;

	@AutoGenerated
	private TextField performedByTF;

	@AutoGenerated
	private ComboBox typeCB;

	@AutoGenerated
	private Label serviceTypeLB;

	@AutoGenerated
	private TextArea descriptionTA;

	@AutoGenerated
	private Label serviceDescriptionLB;

	@AutoGenerated
	private Label serviceNameLB;

	private static final long serialVersionUID = 4337882247373356574L;

	/**
	 * The constructor should first build the main web.components.table.generated.layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public EditServiceForm() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	public EditServiceForm(AbstractView view, String label) {

		super(view, label, new AbsoluteLayout());
		setCompositionRoot(getLayout());

	}

	public Layout buildLayout(String mode) {

		//get component validator
		ComponentValidator componentValidator = getComponentValidator();
		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		DaoIntrfc dao = getDao();	

		//get main web.components.table.generated.layout
		Layout absoluteLayout = buildMainLayout();
		setLayout(absoluteLayout);
		setCompositionRoot(absoluteLayout);

		//get object that will be bind to the web.components.table.generated.components
		final ServiceBean serviceBean;
		if(mode.equals("update") && getData() != null){
			serviceBean = (ServiceBean)getData();
		}else{
			//set initial values
			serviceBean = new ServiceBean();
			serviceBean.setName("");
			serviceBean.setDescription("");
			serviceBean.setPerformedBy("");
			serviceBean.setSpecialist("");
			serviceBean.setLocation("");
			serviceBean.setPriceDue("0.0");
			serviceBean.setPriceExcess("0.0");
			setData(serviceBean);
		}

		//manage administrator rights
		boolean administrator = true;
		boolean isVisible = false;
		if(administrator){
			isVisible = true;
		}
		priceDueLB.setVisible(isVisible);
		priceDueTF.setVisible(isVisible);
		priceExcessLB.setVisible(isVisible);
		priceExcessTF.setVisible(isVisible);

		//manage labels
		serviceNameLB.setValue(propertyManager.getLabelDtl(serviceNameLB.getValue()));
		serviceDescriptionLB.setValue(propertyManager.getLabelDtl(serviceDescriptionLB.getValue()));
		serviceTypeLB.setValue(propertyManager.getLabelDtl(serviceTypeLB.getValue()));
		servicePerformedByLB.setValue(propertyManager.getLabelDtl(servicePerformedByLB.getValue()));
		specialistLB.setValue(propertyManager.getLabelDtl(specialistLB.getValue()));
		lacationLB.setValue(propertyManager.getLabelDtl(lacationLB.getValue()));
		priceDueLB.setValue(propertyManager.getLabelDtl(priceDueLB.getValue()));
		priceExcessLB.setValue(propertyManager.getLabelDtl(priceExcessLB.getValue()));

		//add validators
		priceDueTF.addValidator(componentValidator.getOnlyDigitsValidator("onlyDigitsAllowed"));
		priceExcessTF.addValidator(componentValidator.getOnlyDigitsValidator("onlyDigitsAllowed"));

		//get enumerations 
		final Map<Enumerations, String> serviceTypeEnum = ServiceBean.getTypeEnum();

		//add values in combo boxes
		typeCB.addItems(serviceTypeEnum.values().toArray());	

		//add listeners
		nameTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -4455198718222733777L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setName(event.getProperty().getValue().toString());
						nameTF.setData(event.getProperty().getValue().toString());
						nameTF.setComponentError(null);
					}
				});

		typeCB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 3016542192758078638L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setType(event.getProperty().getValue().toString());
						typeCB.setData(event.getProperty().getValue().toString());
						typeCB.setComponentError(null);
					}
				});

		descriptionTA.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 5924863554767386646L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setDescription(event.getProperty().getValue().toString());
						descriptionTA.setData(event.getProperty().getValue().toString());
						descriptionTA.setComponentError(null);
					}
				});

		performedByTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 1136465549750184114L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setPerformedBy(event.getProperty().getValue().toString());
						performedByTF.setData(event.getProperty().getValue().toString());
						performedByTF.setComponentError(null);
					}
				});

		specialistTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -1136907811464039984L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setSpecialist(event.getProperty().getValue().toString());
						specialistTF.setData(event.getProperty().getValue().toString());
						specialistTF.setComponentError(null);
					}
				});

		locationTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -8370383215979618950L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setLocation(event.getProperty().getValue().toString());
						locationTF.setData(event.getProperty().getValue().toString());
						locationTF.setComponentError(null);
					}
				});

		priceDueTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -1892405239034312810L;

					public void valueChange(ValueChangeEvent event) {
						//double priceDue = Double.parseDouble(event.getProperty().getValue().toString());
						serviceBean.setPriceDue(event.getProperty().getValue().toString());
						priceDueTF.setData(event.getProperty().getValue().toString());
						priceDueTF.setComponentError(null);
					}
				});

		priceExcessTF.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -5724161471168615308L;

					public void valueChange(ValueChangeEvent event) {
						serviceBean.setPriceExcess(event.getProperty().getValue().toString());
						priceExcessTF.setData(event.getProperty().getValue().toString());
						priceExcessTF.setComponentError(null);
					}
				});



		//bind data
		nameTF.setValue(serviceBean.getName() == null ? "" : serviceBean.getName());
		typeCB.setValue(serviceBean.getType() == null ? "" : serviceBean.getType());
		descriptionTA.setValue(serviceBean.getDescription() == null ? "" : serviceBean.getDescription());
		performedByTF.setValue(serviceBean.getPerformedBy() == null ? "" : serviceBean.getPerformedBy());
		specialistTF.setValue(serviceBean.getSpecialist() == null ? "" : serviceBean.getSpecialist());
		locationTF.setValue(serviceBean.getLocation() == null ? "" : serviceBean.getLocation());
		priceDueTF.setValue(serviceBean.getPriceDue()  == null ? "0.0" :  serviceBean.getPriceDue());
		priceExcessTF.setValue(serviceBean.getPriceExcess()  == null ? "0.0" :  serviceBean.getPriceExcess());		

		return absoluteLayout;
	}

	@Override
	public boolean process(HashMap<String, Form> steps) {
		return true;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// web.components.table.generated.common part: create web.components.table.generated.layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("600px");
		mainLayout.setHeight("510px");

		// top-level component properties
		setWidth("600px");
		setHeight("510px");

		// serviceNameLB
		serviceNameLB = new Label();
		serviceNameLB.setImmediate(true);
		serviceNameLB.setWidth("120px");
		serviceNameLB.setHeight("-1px");
		serviceNameLB.setValue("serviceName");
		mainLayout.addComponent(serviceNameLB, "top:20.0px;left:40.0px;");

		// serviceDescriptionLB
		serviceDescriptionLB = new Label();
		serviceDescriptionLB.setImmediate(true);
		serviceDescriptionLB.setWidth("80px");
		serviceDescriptionLB.setHeight("-1px");
		serviceDescriptionLB.setValue("description");
		mainLayout.addComponent(serviceDescriptionLB,
				"top:140.0px;left:20.0px;");

		// descriptionTA
		descriptionTA = new TextArea();
		descriptionTA.setImmediate(true);
		descriptionTA.setWidth("559px");
		descriptionTA.setHeight("100.0%");
		mainLayout.addComponent(descriptionTA,
				"top:158.0px;bottom:190.0px;left:20.0px;");

		// serviceTypeLB
		serviceTypeLB = new Label();
		serviceTypeLB.setImmediate(true);
		serviceTypeLB.setWidth("-1px");
		serviceTypeLB.setHeight("-1px");
		serviceTypeLB.setValue("serviceType");
		mainLayout.addComponent(serviceTypeLB, "top:82.0px;left:40.0px;");

		// typeCB
		typeCB = new ComboBox();
		typeCB.setImmediate(true);
		typeCB.setWidth("100.0%");
		typeCB.setHeight("-1px");
		typeCB.setRequired(true);
		mainLayout.addComponent(typeCB,
				"top:100.0px;right:340.0px;left:20.0px;");

		// performedByTF
		performedByTF = new TextField();
		performedByTF.setImmediate(true);
		performedByTF.setWidth("560px");
		performedByTF.setHeight("-1px");
		mainLayout.addComponent(performedByTF, "top:356.0px;left:20.0px;");

		// servicePerformedByLB
		servicePerformedByLB = new Label();
		servicePerformedByLB.setImmediate(true);
		servicePerformedByLB.setWidth("-1px");
		servicePerformedByLB.setHeight("-1px");
		servicePerformedByLB.setValue("performedBy");
		mainLayout.addComponent(servicePerformedByLB,
				"top:338.0px;left:20.0px;");

		// specialistLB
		specialistLB = new Label();
		specialistLB.setImmediate(true);
		specialistLB.setWidth("-1px");
		specialistLB.setHeight("-1px");
		specialistLB.setValue("specialist");
		mainLayout.addComponent(specialistLB, "top:398.0px;left:20.0px;");

		// specialistTF
		specialistTF = new TextField();
		specialistTF.setImmediate(true);
		specialistTF.setWidth("560px");
		specialistTF.setHeight("-1px");
		mainLayout.addComponent(specialistTF, "top:416.0px;left:20.0px;");

		// lacationLB
		lacationLB = new Label();
		lacationLB.setImmediate(true);
		lacationLB.setWidth("-1px");
		lacationLB.setHeight("-1px");
		lacationLB.setValue("location");
		mainLayout.addComponent(lacationLB, "top:456.0px;left:20.0px;");

		// locationTF
		locationTF = new TextField();
		locationTF.setImmediate(true);
		locationTF.setWidth("560px");
		locationTF.setHeight("-1px");
		mainLayout.addComponent(locationTF, "top:474.0px;left:20.0px;");

		// priceDueLB
		priceDueLB = new Label();
		priceDueLB.setImmediate(true);
		priceDueLB.setWidth("-1px");
		priceDueLB.setHeight("-1px");
		priceDueLB.setValue("priceDue");
		mainLayout.addComponent(priceDueLB, "top:82.0px;left:360.0px;");

		// priceDueTF
		priceDueTF = new TextField();
		priceDueTF.setImmediate(true);
		priceDueTF.setWidth("141px");
		priceDueTF.setHeight("-1px");
		priceDueTF.setRequired(true);
		mainLayout.addComponent(priceDueTF, "top:80.0px;left:440.0px;");

		// priceExcessLB
		priceExcessLB = new Label();
		priceExcessLB.setImmediate(true);
		priceExcessLB.setWidth("-1px");
		priceExcessLB.setHeight("-1px");
		priceExcessLB.setValue("priceExcess");
		mainLayout.addComponent(priceExcessLB, "top:122.0px;left:360.0px;");

		// priceExcessTF
		priceExcessTF = new TextField();
		priceExcessTF.setImmediate(true);
		priceExcessTF.setWidth("140px");
		priceExcessTF.setHeight("-1px");
		mainLayout.addComponent(priceExcessTF, "top:116.0px;left:440.0px;");

		// nameTF
		nameTF = new TextField();
		nameTF.setImmediate(true);
		nameTF.setWidth("560px");
		nameTF.setHeight("-1px");
		nameTF.setRequired(true);
		mainLayout.addComponent(nameTF, "top:38.0px;left:20.0px;");

		return mainLayout;
	}

}
