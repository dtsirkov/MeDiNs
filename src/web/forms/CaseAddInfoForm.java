package web.forms;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextField;

import database.dao.DaoImpl;
import database.dao.DaoIntrfc;
import database.pojo.CaseInfo;
import database.pojo.Country;
import database.pojo.Enumerations;
import database.pojo.Persons;
import database.pojo.Users;
import web.beans.ComboxBean;
import web.beans.PersonBean;
import web.classes.ComponentValidator;
import web.classes.PropertyManager;
import web.views.AbstractView;

public class CaseAddInfoForm extends Form{

	private static final long serialVersionUID = 1L;
	private FormLayout formLayout;
	private TextField franchiseTF;
	private ComboBox doctorAssignedCB;
	private ComboBox statusOpenClosed;
	private ComboBox statusPaidByInsComp;

	public CaseAddInfoForm() {

		buildMainLayout();
		setCompositionRoot(formLayout);

	}

	public CaseAddInfoForm(AbstractView view, String label) {
		super(view, label, new FormLayout());
		setCompositionRoot(getLayout());
	}

	public Layout viewLayout(String mode){
		return buildLayout(mode);
	}

	public Layout buildLayout(String mode) {

		//get component validator
		ComponentValidator componentValidator = getComponentValidator();
		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		DaoIntrfc dao = getDao();	

		//build main layout
		Layout formLayout = buildMainLayout();
		setLayout(formLayout);

		//set captions
		franchiseTF.setCaption(propertyManager.getLabelDtl("franchise"));
		doctorAssignedCB.setCaption(propertyManager.getLabelDtl("assigned_to_doctor"));
		statusOpenClosed.setCaption(propertyManager.getLabelDtl("status_open"));
		statusPaidByInsComp.setCaption(propertyManager.getLabelDtl("status_paid"));

		//get object that will be bind to the form
		final CaseInfo caseInfo;
		if(getData() != null) {
			caseInfo = (CaseInfo)getData();
		}else{
			//set initial values
			caseInfo = new CaseInfo();
			caseInfo.setCaseDate(new Date());
			caseInfo.setFranchise(0.0f);
			caseInfo.setPersonsByResponsiblePerson(null);
			caseInfo.setUsersByLastUpdateBy(null);
			caseInfo.setEnumerationsByStatus1(null);
			caseInfo.setEnumerationsByStatus2(null);
			setData(caseInfo);
		}

		//final Map<Enumerations, String> status2 = dao.getEnumeration("yes no");
		final Map<Enumerations, String> status1 = dao.getEnumeration("yes no");
		final Map<Enumerations, String> status2 = dao.getEnumeration("yes no");

		//add values in combo boxes
		final BeanItemContainer<ComboxBean> yes_nocontainer = new BeanItemContainer<ComboxBean>(ComboxBean.class);
		yes_nocontainer.addAll(ComboxBean.getComboxBeanList(status1));

		statusOpenClosed.setContainerDataSource(yes_nocontainer);
		statusOpenClosed.setItemCaptionPropertyId("label");

		statusPaidByInsComp.setContainerDataSource(yes_nocontainer);
		statusPaidByInsComp.setItemCaptionPropertyId("label");

		//fill in combo box for doctors
		Map<Enumerations, String> typeJob = dao.getEnumeration("job title");
		Enumerations doctorEnum=ComboxBean.getEnum(typeJob, "dr");
		Set<Persons> persons=doctorEnum.getPersonsesForJobTitle();
		List<PersonBean> beanpersons=PersonBean.getPersonBeanList(persons);

		final BeanItemContainer<PersonBean> container = new BeanItemContainer<PersonBean>(PersonBean.class);
		container.addAll(beanpersons);
		doctorAssignedCB.setContainerDataSource(container);
		doctorAssignedCB.setItemCaptionPropertyId("label");

		if (getData() != null){
			//bind data
			franchiseTF.setValue(caseInfo.getFranchise().toString());
			doctorAssignedCB.select(PersonBean.getPersonBean(beanpersons, caseInfo.getPersonsByResponsiblePerson()));
			for (ComboxBean bean : yes_nocontainer.getItemIds()) {		
				if (caseInfo.getEnumerationsByStatus1() != null && caseInfo.getEnumerationsByStatus1().getCode().equals(bean.getValue())) {
					statusOpenClosed.setValue(bean);
				}	
			}
			for (ComboxBean bean : yes_nocontainer.getItemIds()) {		
				if (caseInfo.getEnumerationsByStatus2() != null && caseInfo.getEnumerationsByStatus2().getCode().equals(bean.getValue())) {
					statusPaidByInsComp.setValue(bean);
				}
			}
		}
		else
		{
			//default values
			statusOpenClosed.setValue(yes_nocontainer.getIdByIndex(0));
			//statusOpenClosed.setNullSelectionItemId(yes_nocontainer.getIdByIndex(0).getValue());
			statusPaidByInsComp.setValue(yes_nocontainer.getIdByIndex(1));
			//statusPaidByInsComp.setNullSelectionItemId(yes_nocontainer.getIdByIndex(1).getValue());
		}


		//add listeners
		franchiseTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						caseInfo.setFranchise(Float.valueOf(event.getProperty().getValue().toString()));
						franchiseTF.setData(Float.valueOf(event.getProperty().getValue().toString()));
						franchiseTF.setComponentError(null);
					}
				});

		doctorAssignedCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						if (event.getProperty().getValue() != null){
							PersonBean persBean=(PersonBean) event.getProperty().getValue();
							caseInfo.setPersonsByResponsiblePerson(persBean.getValue());
							doctorAssignedCB.setData(persBean);
							doctorAssignedCB.setComponentError(null);
						}
					}
				});

		statusOpenClosed.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						if (event.getProperty().getValue() != null){
							ComboxBean value = (ComboxBean) event.getProperty().getValue();
							caseInfo.setEnumerationsByStatus1(ComboxBean.getEnum(status1, value.getValue()));
							statusOpenClosed.setData(value);
							statusOpenClosed.setComponentError(null);
						}
					}
				});

		statusPaidByInsComp.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						if (event.getProperty().getValue() != null){
							ComboxBean value = (ComboxBean) event.getProperty().getValue();
							caseInfo.setEnumerationsByStatus2(ComboxBean.getEnum(status1, value.getValue()));
							statusPaidByInsComp.setData(value);
							statusPaidByInsComp.setComponentError(null);
						}
					}
				});

		if(mode.equals("create")){
			Users user = (Users) getView().getUI().getSession().getAttribute("user");
			caseInfo.setUsersByCreatedBy(user);		
		}

		if(mode.equals("update")){
			Users user = (Users) getView().getUI().getSession().getAttribute("user");
			caseInfo.setUsersByLastUpdateBy(user);		
		}

		//manage mode of the form
		if(!mode.equals("validation")){
			setCompositionRoot(formLayout);
		}else{
			setEnabled(false);
		}

		return formLayout;
	}

	public Layout buildMainLayout() {

		// common part: create layout
		formLayout = new FormLayout();
		formLayout.setImmediate(true);

		// top-level component properties
		//setWidth("600px");
		//setHeight("510px");

		//define measurements of the web.components.table.generated.components 
		String width = "180px", height = "-1px";

		// franchiseTF
		franchiseTF = new TextField();
		franchiseTF.setImmediate(true);
		franchiseTF.setRequired(false);
		franchiseTF.setWidth(width);
		franchiseTF.setHeight(height);
		formLayout.addComponent(franchiseTF);

		// doctorAssignedCB
		doctorAssignedCB = new ComboBox();
		doctorAssignedCB.setImmediate(true);
		doctorAssignedCB.setRequired(true);
		doctorAssignedCB.setWidth(width);
		doctorAssignedCB.setHeight(height);
		formLayout.addComponent(doctorAssignedCB);

		// status1CB
		statusOpenClosed = new ComboBox();
		statusOpenClosed.setImmediate(true);
		statusOpenClosed.setRequired(true);
		statusOpenClosed.setWidth(width);
		statusOpenClosed.setHeight(height);
		formLayout.addComponent(statusOpenClosed);

		// status2CB
		statusPaidByInsComp = new ComboBox();
		statusPaidByInsComp.setImmediate(true);
		statusPaidByInsComp.setRequired(true);
		statusPaidByInsComp.setWidth(width);
		statusPaidByInsComp.setHeight(height);
		formLayout.addComponent(statusPaidByInsComp);

		return formLayout;
	}

	@Override
	public boolean process(HashMap<String, Form> steps) {
		//get access to DB
		DaoIntrfc dao = getDao();

		CaseInfo caseInfo = (CaseInfo) getData();
		caseInfo.setCaseDate(new Date());
		dao.evict(caseInfo);

		steps.get("stepCaseGeneralInfo").setData(caseInfo);
		//steps.get("stepValidate").setData(caseInfo);

		return true;
	}

}
