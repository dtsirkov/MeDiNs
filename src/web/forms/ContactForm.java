package web.forms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import web.StepIntrfc;
import web.beans.ComboxBean;
import web.classes.ComponentValidator;
import web.classes.PropertyManager;
import web.views.AbstractView;



import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextField;

import database.dao.DaoImpl;
import database.dao.DaoIntrfc;
import database.pojo.Contacts;
import database.pojo.Country;
import database.pojo.Enumerations;
import database.pojo.Organizations;

public class ContactForm extends Form implements StepIntrfc{

	private static final long serialVersionUID = 1L;
	private FormLayout formLayout;
	private TextField addressTF;
	private TextField zipCodeTF;
	private TextField cityTF;
	private ComboBox countryCB;
	private TextField phoneTF;
	private TextField mobileTF;
	private TextField emailTF;
	private ComboBox typeCB;
	private ComboBox activeCB;
	private ComboBox preferedCB;

	public ContactForm(AbstractView view, String label) {

		super(view, label, new FormLayout());
		setCompositionRoot(getLayout());

	}

	public Layout viewLayout(String mode){
		return buildLayout(mode);
	}

	public Layout buildLayout(String mode) {
		//get component validator
		ComponentValidator componentValidator = getComponentValidator();
		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		DaoImpl dao = (DaoImpl) getDao();	

		//build main layout
		Layout formLayout = buildMainLayout();
		setLayout(formLayout);

		//set captions
		addressTF.setCaption(propertyManager.getLabelDtl("address"));
		zipCodeTF.setCaption(propertyManager.getLabelDtl("zip"));
		cityTF.setCaption(propertyManager.getLabelDtl("city"));
		countryCB.setCaption(propertyManager.getLabelDtl("country"));
		phoneTF.setCaption(propertyManager.getLabelDtl("phone"));
		mobileTF.setCaption(propertyManager.getLabelDtl("mobile"));
		emailTF.setCaption(propertyManager.getLabelDtl("email"));
		typeCB.setCaption(propertyManager.getLabelDtl("contactType"));
		preferedCB.setCaption(propertyManager.getLabelDtl("preferedContact"));
		activeCB.setCaption(propertyManager.getLabelDtl("activeContact"));

		//get object that will be bind to the form
		final Contacts contact;
		if(getData() != null) {
			contact = (Contacts)getData();
		}else{
			//set initial values
			contact = new Contacts();
			contact.setAddress("");
			contact.setCity("");
			contact.setCountry("");
			contact.setZip("");
			contact.setEmail("");
			contact.setPhone("");
			contact.setMobile("");
			setData(contact);
		}

		//get enumerations 
		final Map<Enumerations, String> countryEnum = dao.getEnumeration("country");
		final Map<Enumerations, String> contactTypeEnum = dao.getEnumeration("contact type");
		final Map<Enumerations, String> contactActiveEnum = dao.getEnumeration("yes no");
		final Map<Enumerations, String> contactPreferedEnum = dao.getEnumeration("yes no");

		List<Country> countries = getCountries(dao);

		//add values in combo box
		final BeanItemContainer<Country> container = new BeanItemContainer<Country>(Country.class);
		container.addAll(countries);
		countryCB.setContainerDataSource(container);
		String language = dao.getLanguage();
		String formatedLanguage = language.substring(0, 1).toUpperCase() + language.substring(1, 2);
		countryCB.setItemCaptionPropertyId("name" + formatedLanguage);

		//add values in combo boxes
		//countryCB.addItems(countryEnum.values().toArray());		
		typeCB.addItems(contactTypeEnum.values().toArray());		
		activeCB.addItems(contactActiveEnum.values().toArray());	
		preferedCB.addItems(contactPreferedEnum.values().toArray());

		//add listeners
		addressTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setAddress(event.getProperty().getValue().toString());
						addressTF.setData(event.getProperty().getValue().toString());
						addressTF.setComponentError(null);
					}
				});

		zipCodeTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setZip(event.getProperty().getValue().toString());
						zipCodeTF.setData(event.getProperty().getValue().toString());
						zipCodeTF.setComponentError(null);
					}
				});

		cityTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setCity(event.getProperty().getValue().toString());
						cityTF.setData(event.getProperty().getValue().toString());
						cityTF.setComponentError(null);
					}
				});

		countryCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						Object selection = event.getProperty().getValue();
						if (selection != null){
							String countryCode=((Country) selection).getId();
							contact.setCountry(countryCode);
							countryCB.setData(selection);
							countryCB.setComponentError(null);
						}
					}});

		phoneTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setPhone(event.getProperty().getValue().toString());
						phoneTF.setData(event.getProperty().getValue().toString());
						phoneTF.setComponentError(null);
					}
				});

		mobileTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setMobile(event.getProperty().getValue().toString());
						mobileTF.setData(event.getProperty().getValue().toString());
						mobileTF.setComponentError(null);
					}
				});

		emailTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setEmail(event.getProperty().getValue().toString());
						emailTF.setData(event.getProperty().getValue().toString());
						emailTF.setComponentError(null);
					}
				});

		typeCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						Enumerations enumeration = new Enumerations();
						for (Map.Entry<Enumerations, String> entry : contactTypeEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = (Enumerations)entry.getKey();
							}		
						}
						contact.setEnumerationsByType(enumeration);
						typeCB.setData(event.getProperty().getValue().toString());
						typeCB.setComponentError(null);
					}
				});


		preferedCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						Enumerations enumeration = new Enumerations();
						for (Map.Entry<Enumerations, String> entry : contactPreferedEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = (Enumerations)entry.getKey();
							}		
						}
						contact.setEnumerationsByPrefered(enumeration);
						preferedCB.setData(event.getProperty().getValue().toString());
						preferedCB.setComponentError(null);
					}
				});

		//if(mode.equals("update")){
		if(getData() != null){	
			//activeCB.setEnabled(true);
			activeCB.setReadOnly(false);
			activeCB.setRequired(true);
			activeCB.addValueChangeListener(
					new Property.ValueChangeListener() {
						private static final long serialVersionUID = 1L;
						public void valueChange(ValueChangeEvent event) {
							String value = event.getProperty().getValue().toString();
							Enumerations enumeration = new Enumerations();
							for (Map.Entry<Enumerations, String> entry : contactPreferedEnum.entrySet()) {		
								if (value.equals(entry.getValue())) {
									enumeration = (Enumerations)entry.getKey();
								}		
							}
							contact.setEnumerationsByActive(enumeration);
							activeCB.setData(event.getProperty().getValue().toString());
							activeCB.setComponentError(null);
						}
					});
		}else{
			String codeValue = "yes";
			String value = "";
			for (Map.Entry<Enumerations, String> entry : contactActiveEnum.entrySet()) {		
				if (codeValue.equals(entry.getKey().getCode())) {
					value = (String)entry.getValue();
					contact.setEnumerationsByActive(entry.getKey());
					activeCB.setData(value);
					activeCB.setComponentError(null);
				}		
			}
			activeCB.select(value);
			activeCB.setReadOnly(true);
		}

		//if mode is equal to "update" display selected value
		for (Map.Entry<Enumerations, String> entry : countryEnum.entrySet()) {		
			if (contact.getCountry().equals(entry.getKey().getCode())) {
				activeCB.select((String)entry.getValue());
			}		
		}
		typeCB.select(contactTypeEnum.get(contact.getEnumerationsByType()));
		activeCB.select(contactActiveEnum.get(contact.getEnumerationsByActive()));
		preferedCB.select(contactPreferedEnum.get(contact.getEnumerationsByPrefered()));

		//retrieve and bind data to fields
		if(getData() != null){
			addressTF.setValue(contact.getAddress());
			zipCodeTF.setValue(contact.getZip());
			cityTF.setValue(contact.getCity());
			countryCB.setValue(getCountry(dao, contact.getCountry()));
			phoneTF.setValue(contact.getPhone());
			mobileTF.setValue(contact.getMobile());
			emailTF.setValue(contact.getEmail());
			typeCB.setValue(contact.getEnumerationsByType());
			preferedCB.setValue(contact.getEnumerationsByPrefered());
			activeCB.setValue(contact.getEnumerationsByActive());
		}

		//manage mode of the form
		if(!mode.equals("validation")){
			setCompositionRoot(formLayout);
		}else{
			setEnabled(false);
		}

		return formLayout;
	}

	@AutoGenerated
	public Layout buildMainLayout() {

		// common part: create layout
		formLayout = new FormLayout();
		formLayout.setImmediate(true);

		//define measurements of the web.components.table.generated.components 
		String width = "180px", height = "-1px";

		// addressTF
		addressTF = new TextField();
		addressTF.setImmediate(true);
		addressTF.setRequired(false);
		addressTF.setWidth(width);
		addressTF.setHeight(height);
		formLayout.addComponent(addressTF);

		// zipCodeTF
		zipCodeTF = new TextField();
		zipCodeTF.setImmediate(true);
		zipCodeTF.setRequired(false);
		zipCodeTF.setWidth(width);
		zipCodeTF.setHeight(height);
		formLayout.addComponent(zipCodeTF);

		// cityTF
		cityTF = new TextField();
		cityTF.setImmediate(true);
		cityTF.setRequired(true);
		cityTF.setWidth(width);
		cityTF.setHeight(height);
		formLayout.addComponent(cityTF);		

		// countryCB
		countryCB = new ComboBox();
		countryCB.setImmediate(true);
		countryCB.setRequired(true);
		countryCB.setWidth(width);
		countryCB.setHeight(height);
		formLayout.addComponent(countryCB);

		// phoneTF
		phoneTF = new TextField();
		phoneTF.setImmediate(true);
		phoneTF.setRequired(false);
		phoneTF.setWidth(width);
		phoneTF.setHeight(height);
		formLayout.addComponent(phoneTF);


		// mobileTF
		mobileTF = new TextField();
		mobileTF.setImmediate(true);
		mobileTF.setRequired(false);
		mobileTF.setWidth(width);
		mobileTF.setHeight(height);
		formLayout.addComponent(mobileTF);

		// emailTF
		emailTF = new TextField();
		emailTF.setImmediate(true);
		emailTF.setRequired(false);
		emailTF.setWidth(width);
		emailTF.setHeight(height);
		formLayout.addComponent(emailTF);

		// typeCB
		typeCB = new ComboBox();
		typeCB.setImmediate(true);
		typeCB.setRequired(false);
		typeCB.setWidth(width);
		typeCB.setHeight(height);
		formLayout.addComponent(typeCB);

		// preferedCB
		preferedCB = new ComboBox();
		preferedCB.setImmediate(true);
		preferedCB.setRequired(false);
		preferedCB.setWidth(width);
		preferedCB.setHeight(height);
		formLayout.addComponent(preferedCB);

		// activeCB
		activeCB = new ComboBox();
		activeCB.setImmediate(true);
		activeCB.setRequired(false);
		activeCB.setWidth(width);
		activeCB.setHeight(height);
		formLayout.addComponent(activeCB);

		return formLayout;

	}

	public static List<Country> getCountries(DaoIntrfc dao){

		List<Country> outCountries = new ArrayList<Country>(0);
		Country country = new Country();		
		List<Object> ls = dao.findByExample(country);

		for(Object c:ls){
			Country c1 = (Country) c;
			outCountries.add(c1);
		}
		return outCountries;		
	}

	public static Country getCountry(DaoIntrfc dao, String countryCode){
		return (Country) dao.findById("Country", countryCode);	
	}

	@Override
	public boolean process(HashMap<String, Form> steps) {
		//get access to DB
		DaoIntrfc dao = getDao();

		Contacts contact = (Contacts) getData();
		dao.evict(contact);

		steps.get("stepCreateContact").setData(contact);

		return true;
	}
}
