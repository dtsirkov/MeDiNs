package web.forms;

import java.util.HashMap;
import java.util.Map;

import pojo.classes.Deceases;
import pojo.classes.Enumerations;
import web.classes.ComponentValidator;
import web.classes.PropertyManager;
import web.views.AbstractView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;

import dao.classes.DaoIntrfc;

public class DiagnosisForm extends Form {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TextArea deceaseSymptomsTA;
	@AutoGenerated
	private Label deceaseSymptomsLB;
	@AutoGenerated
	private ComboBox deceaseClassificationCB;
	@AutoGenerated
	private Label deceaseClassificationLB;
	@AutoGenerated
	private Button selectDeceaseBTN;
	@AutoGenerated
	private TextField deceaseNameTF;
	@AutoGenerated
	private Label deceaseNameLB;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DiagnosisForm() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public DiagnosisForm(AbstractView view, String label) {

		super(view, label, new AbsoluteLayout());
		setCompositionRoot(getLayout());

	}

	public Layout buildLayout(String mode) {

		//get component validator
		ComponentValidator componentValidator = getComponentValidator();
		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		DaoIntrfc dao = getDao();	

		//get main layout
		Layout absoluteLayout = buildMainLayout();
		setLayout(absoluteLayout);
		setCompositionRoot(absoluteLayout);

		deceaseNameLB.setValue(propertyManager.getLabelDtl("deceaseNameLB"));
		deceaseClassificationLB.setValue(propertyManager.getLabelDtl("deceaseClassificationLB"));
		deceaseSymptomsLB.setValue(propertyManager.getLabelDtl("deceaseSymptomsLB"));

		//get object that will be bind to the form
		final Deceases decease;
		if(mode.equals("update") || getData() != null){
			decease = (Deceases)getData();
		}else{
			//set initial values
			decease = new Deceases();
			decease.setName("");
			decease.setSymptoms("");
			setData(decease);
		}

		//get enumerations 
		final Map<Enumerations, String> deceaseClassifiactionEnum = dao.getEnumeration("decease type");

		//add values in combo boxes
		deceaseClassificationCB.addItems(deceaseClassifiactionEnum.values().toArray());	

		//if mode is equal to "update" display selected value
		deceaseClassificationCB.select(deceaseClassifiactionEnum.get(decease.getEnumerations()));

		//add listeners
		deceaseNameTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						decease.setName(event.getProperty().getValue().toString());
						deceaseNameTF.setData(event.getProperty().getValue().toString());
						deceaseNameTF.setComponentError(null);
					}
				});

		deceaseClassificationCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						Enumerations enumeration = new Enumerations();
						if(event.getProperty().getValue() != null){
							String value = event.getProperty().getValue().toString();
							for (Map.Entry<Enumerations, String> entry : deceaseClassifiactionEnum.entrySet()) {		
								if (value.equals(entry.getValue())) {
									enumeration = (Enumerations)entry.getKey();
								}		
							}
						}
						decease.setEnumerations(enumeration);
						deceaseClassificationCB.setData(event.getProperty().getValue().toString());
						deceaseClassificationCB.setComponentError(null);
					}
				});

		deceaseSymptomsTA.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						decease.setSymptoms(event.getProperty().getValue().toString());
						deceaseSymptomsTA.setData(event.getProperty().getValue().toString());
						deceaseSymptomsTA.setComponentError(null);
					}
				});

		//bind data
		deceaseNameTF.setValue(decease.getName());
		deceaseClassificationCB.setValue(decease.getEnumerations());
		deceaseSymptomsTA.setValue(decease.getSymptoms());

		return absoluteLayout;
	}

	@Override
	public boolean process(HashMap<String, Form> steps) {
		// TODO Auto-generated method stub
		return true;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("400px");
		mainLayout.setHeight("400px");

		// top-level component properties
		setWidth("400px");
		setHeight("400px");

		// deceaseNameLB
		deceaseNameLB = new Label();
		deceaseNameLB.setImmediate(true);
		deceaseNameLB.setWidth("360px");
		deceaseNameLB.setHeight("18px");
		deceaseNameLB.setValue("Dicease Name");
		mainLayout.addComponent(deceaseNameLB, "top:22.0px;left:20.0px;");

		// deceaseNameTF
		deceaseNameTF = new TextField();
		deceaseNameTF.setImmediate(true);
		deceaseNameTF.setWidth("320px");
		deceaseNameTF.setHeight("-1px");
		deceaseNameTF.setRequired(true);
		mainLayout.addComponent(deceaseNameTF, "top:56.0px;left:20.0px;");

		// selectDeceaseBTN
		selectDeceaseBTN = new Button();
		selectDeceaseBTN.setCaption("...");
		selectDeceaseBTN.setImmediate(true);
		selectDeceaseBTN.setWidth("100.0%");
		selectDeceaseBTN.setHeight("-1px");
		mainLayout.addComponent(selectDeceaseBTN,
				"top:56.0px;right:19.0px;left:340.0px;");

		// deceaseClassificationLB
		deceaseClassificationLB = new Label();
		deceaseClassificationLB.setImmediate(true);
		deceaseClassificationLB.setWidth("360px");
		deceaseClassificationLB.setHeight("-1px");
		deceaseClassificationLB.setValue("Dicease Classification");
		mainLayout.addComponent(deceaseClassificationLB,
				"top:102.0px;left:20.0px;");

		// deceaseClassificationCB
		deceaseClassificationCB = new ComboBox();
		deceaseClassificationCB.setImmediate(true);
		deceaseClassificationCB.setWidth("100.0%");
		deceaseClassificationCB.setHeight("-1px");
		deceaseClassificationCB.setRequired(true);
		mainLayout.addComponent(deceaseClassificationCB,
				"top:136.0px;right:18.0px;left:20.0px;");

		// deceaseSymptomsLB
		deceaseSymptomsLB = new Label();
		deceaseSymptomsLB.setImmediate(true);
		deceaseSymptomsLB.setWidth("360px");
		deceaseSymptomsLB.setHeight("-1px");
		deceaseSymptomsLB.setValue("Decease Symptoms");
		mainLayout.addComponent(deceaseSymptomsLB, "top:182.0px;left:21.0px;");

		// deceaseSymptomsTA
		deceaseSymptomsTA = new TextArea();
		deceaseSymptomsTA.setImmediate(true);
		deceaseSymptomsTA.setWidth("100.0%");
		deceaseSymptomsTA.setHeight("160px");
		deceaseSymptomsTA.setRequired(true);
		mainLayout.addComponent(deceaseSymptomsTA,
				"top:220.0px;right:11.0px;left:21.0px;");

		return mainLayout;
	}

}