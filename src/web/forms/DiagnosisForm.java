package web.forms;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import web.beans.DiagnosisBean;
import web.classes.PropertyManager;
import web.components.table.generated.autogenerate.GenerateTable;
import web.views.AbstractView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;

import database.dao.DaoIntrfc;
import database.pojo.Diagnosis;
import database.pojo.MedicalReport;

public class DiagnosisForm extends Form {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -2072563604737739483L;

	BeanItemContainer<DiagnosisBean> diagnosisBeanItemContainer;

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label recommendationLB;
	@AutoGenerated
	private TextArea recommendationTA;
	@AutoGenerated
	private VerticalLayout tableVerticalLayout;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DiagnosisForm() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	public DiagnosisForm(AbstractView view, String label) {

		super(view, label, new AbsoluteLayout());
		setCompositionRoot(getLayout());

	}

	public Layout buildLayout(String mode) {


		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();

		//get access to DB
		DaoIntrfc dao = getDao();	

		//build main layout
		Layout absoluteLayout = buildMainLayout();
		setLayout(absoluteLayout);
		setCompositionRoot(absoluteLayout);

		//manage labels
		recommendationLB.setValue(propertyManager.getLabelDtl(recommendationLB.getValue()));

		diagnosisBeanItemContainer = new BeanItemContainer<DiagnosisBean>(DiagnosisBean.class);
		final MedicalReport medicalReport;
		if(getData() != null){
			medicalReport = (MedicalReport)getData();
			Set<Diagnosis> diagnosis = medicalReport.getDiagnosises();
			diagnosis.size();
			Iterator<Diagnosis> iterator = diagnosis.iterator();
			Diagnosis tmpDiagnosis;
			while(iterator.hasNext()){
				tmpDiagnosis = iterator.next();
				if(tmpDiagnosis != null){
					DiagnosisBean diagnosisBean = new DiagnosisBean(tmpDiagnosis);
					diagnosisBeanItemContainer.addItem(diagnosisBean);
				}
				dao.evict(tmpDiagnosis);
			}
			diagnosisBeanItemContainer.sort(new Object[] { "mkb" }, new boolean[] { true });
		}else{
			medicalReport = new MedicalReport();
		}

		EditDiagnosisForm editDiagnosisForm;
		editDiagnosisForm = new EditDiagnosisForm(getView(), "editDiagnosis");

		GenerateTable table = new GenerateTable(DiagnosisBean.class, diagnosisBeanItemContainer, editDiagnosisForm);
		table.setWidth("100%");
		tableVerticalLayout.addComponent(table);
		tableVerticalLayout.setComponentAlignment(table, Alignment.MIDDLE_CENTER);

		recommendationTA.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -8938233304187613461L;

					public void valueChange(ValueChangeEvent event) {
						medicalReport.setRecommendation(event.getProperty().getValue().toString());
						recommendationTA.setData(event.getProperty().getValue().toString());
						recommendationTA.setComponentError(null);
					}
				});

		//bind data 
		recommendationTA.setValue(medicalReport.getRecommendation() == null ? "" : medicalReport.getRecommendation());

		return absoluteLayout;
	}

	public Layout viewLayout(String mode) {

		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();

		//build main layout
		AbsoluteLayout absoluteLayout = buildMainLayout();
		absoluteLayout.setWidth("600px");

		//manage labels
		recommendationLB.setValue(propertyManager.getLabelDtl(recommendationLB.getValue()));

		BeanItemContainer<DiagnosisBean> diagnosisBeanItemContainer = new BeanItemContainer<DiagnosisBean>(DiagnosisBean.class);
		MedicalReport medicalReport = (MedicalReport)getData();
		if(medicalReport != null){
			Set<Diagnosis> allDiagnosis = medicalReport.getDiagnosises();
			Iterator<Diagnosis> iterator = allDiagnosis.iterator();
			Diagnosis diagnosis;
			while(iterator.hasNext()){
				diagnosis = iterator.next();
				if(diagnosis != null){
					DiagnosisBean diagnosisBean = new DiagnosisBean(diagnosis);
					diagnosisBeanItemContainer.addItem(diagnosisBean);
				}
				getDao().evict(diagnosis);
			}	
			diagnosisBeanItemContainer.sort(new Object[] { "mkb" }, new boolean[] { true });
		}

		GenerateTable table = new GenerateTable(DiagnosisBean.class, diagnosisBeanItemContainer, null);
		tableVerticalLayout.setMargin(new MarginInfo(true, false, true, false));
		tableVerticalLayout.setWidth("566px");
		tableVerticalLayout.addComponent(table);

		recommendationTA.setValue(medicalReport.getRecommendation() == null ? "" : medicalReport.getRecommendation());
		recommendationTA.setWidth("566px");
		recommendationTA.setStyleName("my-disabled");
		recommendationTA.setEnabled(false);

		setEnabled(false);

		return absoluteLayout;
	}	 

	@Override
	public boolean process(HashMap<String, Form> steps) {

		MedicalReport medicalReport = (MedicalReport)getData();
		List<DiagnosisBean> itemIdsLs = diagnosisBeanItemContainer.getItemIds();
		Iterator<DiagnosisBean> iterator = itemIdsLs.iterator();
		Diagnosis diagnosis;
		Set<Diagnosis> allDiagnosis = new HashSet<Diagnosis>(0);
		while(iterator.hasNext()){
			diagnosis = iterator.next().createPersistenceObject();
			allDiagnosis.add(diagnosis);
			getDao().evict(diagnosis);
		}
		medicalReport.setDiagnosises(allDiagnosis);	

		steps.get("stepDiagnosis").setData(medicalReport);

		return true;
	}


	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("800px");
		mainLayout.setHeight("440px");

		// top-level component properties
		setWidth("800px");
		setHeight("440px");

		// tableVerticalLayout
		tableVerticalLayout = new VerticalLayout();
		tableVerticalLayout.setImmediate(true);
		tableVerticalLayout.setWidth("760px");
		tableVerticalLayout.setHeight("280px");
		tableVerticalLayout.setMargin(false);
		mainLayout.addComponent(tableVerticalLayout, "top:0.0px;left:21.0px;");

		// recommendationTA
		recommendationTA = new TextArea();
		recommendationTA.setImmediate(true);
		recommendationTA.setWidth("760px");
		recommendationTA.setHeight("120px");
		mainLayout.addComponent(recommendationTA, "top:300.0px;left:21.0px;");

		// recommendationLB
		recommendationLB = new Label();
		recommendationLB.setImmediate(true);
		recommendationLB.setWidth("160px");
		recommendationLB.setHeight("-1px");
		recommendationLB.setValue("recommendation");
		mainLayout.addComponent(recommendationLB, "top:280.0px;left:40.0px;");

		return mainLayout;
	}

}
