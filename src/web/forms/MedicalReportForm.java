package web.forms;

import java.util.HashMap;

import web.beans.ServiceBean;
import web.classes.ComponentValidator;
import web.classes.PropertyManager;
import web.views.AbstractView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextArea;

import database.dao.DaoIntrfc;
import database.pojo.MedicalReport;
import database.pojo.Persons;

public class MedicalReportForm extends Form {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label acceptTherapyLB;
	@AutoGenerated
	private CheckBox therapyNoCKB;
	@AutoGenerated
	private CheckBox therapyYesCKB;
	@AutoGenerated
	private TextArea therapyTA;
	@AutoGenerated
	private Label therapyLB;
	@AutoGenerated
	private CheckBox drugsNoCKB;
	@AutoGenerated
	private CheckBox drugsYesCKB;
	@AutoGenerated
	private Label drugsLB;
	@AutoGenerated
	private CheckBox alcoholNoCKB;
	@AutoGenerated
	private CheckBox alcoholYesCKB;
	@AutoGenerated
	private Label alcoholLB;
	@AutoGenerated
	private TextArea presentConditionTA;
	@AutoGenerated
	private Label presentConditionLB;
	@AutoGenerated
	private TextArea complaintsTA;
	@AutoGenerated
	private Label complaintsLB;
	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main web.components.table.generated.layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MedicalReportForm() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public MedicalReportForm(AbstractView view, String label) {

		super(view, label, new AbsoluteLayout());
		setCompositionRoot(getLayout());

	}

	public Layout viewLayout(String mode){
		return buildLayout(mode);
	}

	public Layout buildLayout(String mode) {

		//get component validator
		ComponentValidator componentValidator = getComponentValidator();
		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		DaoIntrfc dao = getDao();	

		//build main layout of the form
		Layout absoluteLayout = buildMainLayout();
		setLayout(absoluteLayout);

		complaintsLB.setValue(propertyManager.getLabelDtl(complaintsLB.getValue()));
		presentConditionLB.setValue(propertyManager.getLabelDtl(presentConditionLB.getValue()));
		therapyLB.setValue(propertyManager.getLabelDtl(therapyLB.getValue()));
		alcoholLB.setValue(propertyManager.getLabelDtl(alcoholLB.getValue()) + ":");
		drugsLB.setValue(propertyManager.getLabelDtl(drugsLB.getValue()) + ":");
		acceptTherapyLB.setValue(propertyManager.getLabelDtl(acceptTherapyLB.getValue()) + ":"); 
		alcoholYesCKB.setCaption(propertyManager.getLabelDtl("yes"));
		alcoholNoCKB.setCaption(propertyManager.getLabelDtl("no"));
		drugsYesCKB.setCaption(propertyManager.getLabelDtl("yes"));
		drugsNoCKB.setCaption(propertyManager.getLabelDtl("no"));
		therapyYesCKB.setCaption(propertyManager.getLabelDtl("yes"));
		therapyNoCKB.setCaption(propertyManager.getLabelDtl("no"));

		//get object that will be bind to the form
		final MedicalReport medicalReport;
		if(getData() != null){
			medicalReport = (MedicalReport)getData();
		}else{
			//set initial values
			medicalReport = new MedicalReport();
			medicalReport.setAcceptTreatment("yes");
			medicalReport.setAlcDrugs("no");
			medicalReport.setComplaints("");
			medicalReport.setPresentCondition("");
			medicalReport.setTherapy("");
			medicalReport.setRecommendation("");
			setData(medicalReport);
		}

		//bind data
		complaintsTA.setValue(medicalReport.getComplaints() == null ? "" : medicalReport.getComplaints());
		presentConditionTA.setValue(medicalReport.getPresentCondition() == null ? "" : medicalReport.getPresentCondition());
		therapyTA.setValue(medicalReport.getTherapy() == null ? "" : medicalReport.getTherapy());

		if(medicalReport.getAlcDrugs().equals("no")){
			alcoholNoCKB.setValue(true);
			drugsNoCKB.setValue(true);
		}else{
			alcoholYesCKB.setValue(true);
			drugsYesCKB.setValue(true);
		}

		if(medicalReport.getAcceptTreatment().equals("yes"))
			therapyYesCKB.setValue(true);
		else
			therapyNoCKB.setValue(true);

		setData(medicalReport);

		//manage mode of the form
		if(!mode.equals("validation")){
			complaintsLB.setStyleName(null);
			presentConditionLB.setStyleName(null);
			therapyLB.setStyleName(null);
			setCompositionRoot(absoluteLayout);
		}else{
			complaintsLB.setStyleName("compenentTitle");
			presentConditionLB.setStyleName("compenentTitle");
			therapyLB.setStyleName("compenentTitle");
			//this.setEnabled(false);
			//set read only to all components of the form
			this.setReadOnly(true);
		}

		//add listeners
		complaintsTA.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -5045372795694048023L;

					public void valueChange(ValueChangeEvent event) {
						medicalReport.setComplaints(event.getProperty().getValue().toString());
						complaintsTA.setData(event.getProperty().getValue().toString());
						complaintsTA.setComponentError(null);
					}
				});

		presentConditionTA.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -8392637045426205985L;

					public void valueChange(ValueChangeEvent event) {
						medicalReport.setPresentCondition(event.getProperty().getValue().toString());
						presentConditionTA.setData(event.getProperty().getValue().toString());
						presentConditionTA.setComponentError(null);
					}
				});

		therapyTA.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -8392637045426205985L;

					public void valueChange(ValueChangeEvent event) {
						medicalReport.setTherapy(event.getProperty().getValue().toString());
						therapyTA.setData(event.getProperty().getValue().toString());
						therapyTA.setComponentError(null);
					}
				});

		alcoholNoCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 8345292562358961255L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							alcoholYesCKB.setValue(false);
							if(!drugsYesCKB.getValue())
								medicalReport.setAlcDrugs("no");
						}else{
							alcoholYesCKB.setValue(true);
							medicalReport.setAlcDrugs("yes");
						}
						alcoholNoCKB.setData(event.getProperty().getValue());
					}
				});

		alcoholYesCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -6440850576479940658L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							alcoholNoCKB.setValue(false);
							medicalReport.setAlcDrugs("yes");
						}else{
							alcoholNoCKB.setValue(true);
							if(!drugsYesCKB.getValue())
								medicalReport.setAlcDrugs("no");
						}
						alcoholYesCKB.setData(event.getProperty().getValue());
					}
				});

		drugsNoCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 8994563370032443982L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							drugsYesCKB.setValue(false);
							if(!alcoholYesCKB.getValue())
								medicalReport.setAlcDrugs("no");
						}else{
							drugsYesCKB.setValue(true);
							medicalReport.setAlcDrugs("yes");
						}
						drugsNoCKB.setData(event.getProperty().getValue());
					}
				});

		drugsYesCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = 9030498967487044676L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							drugsNoCKB.setValue(false);
							medicalReport.setAlcDrugs("yes");
						}else{
							drugsNoCKB.setValue(true);
							if(!alcoholYesCKB.getValue())
								medicalReport.setAlcDrugs("no");
						}
						drugsYesCKB.setData(event.getProperty().getValue());
					}
				});

		therapyYesCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -5243098335823497800L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							therapyNoCKB.setValue(false);
							medicalReport.setAcceptTreatment("yes");
						}else{
							therapyNoCKB.setValue(true);
							medicalReport.setAcceptTreatment("no");
						}
						therapyYesCKB.setData(event.getProperty().getValue());
					}
				});

		therapyNoCKB.addValueChangeListener(
				new Property.ValueChangeListener() {

					private static final long serialVersionUID = -7182127965966007303L;

					public void valueChange(ValueChangeEvent event) {
						if((Boolean)event.getProperty().getValue()){
							therapyYesCKB.setValue(false);
							medicalReport.setAcceptTreatment("no");
						}else{
							therapyYesCKB.setValue(true);
							medicalReport.setAcceptTreatment("yes");
						}
						therapyNoCKB.setData(event.getProperty().getValue());
					}
				});

		return absoluteLayout;
	}

	@Override
	public boolean process(HashMap<String, Form> steps) {

		MedicalReport medicalReport = (MedicalReport) getData();
		getDao().evict(medicalReport);

		steps.get("stepMedicalReport").setData(medicalReport);
		//steps.get("stepDiagnosis").setData(medicalReport);

		return true;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("600px");
		mainLayout.setHeight("510px");

		// top-level component properties
		setWidth("600px");
		setHeight("510px");

		// complaintsLB
		complaintsLB = new Label();
		complaintsLB.setImmediate(true);
		complaintsLB.setWidth("-1px");
		complaintsLB.setHeight("-1px");
		complaintsLB.setValue("complaints");
		mainLayout.addComponent(complaintsLB, "top:82.0px;left:40.0px;");

		// complaintsTA
		complaintsTA = new TextArea();
		complaintsTA.setImmediate(true);
		complaintsTA.setWidth("100.0%");
		complaintsTA.setHeight("100px");
		complaintsTA.setRequired(true);
		mainLayout.addComponent(complaintsTA,
				"top:100.0px;right:12.0px;left:20.0px;");

		// presentConditionLB
		presentConditionLB = new Label();
		presentConditionLB.setImmediate(true);
		presentConditionLB.setWidth("-1px");
		presentConditionLB.setHeight("-1px");
		presentConditionLB.setValue("presentCondition");
		mainLayout.addComponent(presentConditionLB, "top:220.0px;left:40.0px;");

		// presentConditionTA
		presentConditionTA = new TextArea();
		presentConditionTA.setImmediate(true);
		presentConditionTA.setWidth("100.0%");
		presentConditionTA.setHeight("100px");
		presentConditionTA.setRequired(true);
		mainLayout.addComponent(presentConditionTA,
				"top:240.0px;right:12.0px;left:20.0px;");

		// alcoholLB
		alcoholLB = new Label();
		alcoholLB.setImmediate(true);
		alcoholLB.setWidth("-1px");
		alcoholLB.setHeight("-1px");
		alcoholLB.setValue("alcohol");
		mainLayout.addComponent(alcoholLB, "top:20.0px;left:40.0px;");

		// alcoholYesCKB
		alcoholYesCKB = new CheckBox();
		alcoholYesCKB.setCaption("yes");
		alcoholYesCKB.setImmediate(true);
		alcoholYesCKB.setWidth("-1px");
		alcoholYesCKB.setHeight("-1px");
		mainLayout.addComponent(alcoholYesCKB, "top:20.0px;left:122.0px;");

		// alcoholNoCKB
		alcoholNoCKB = new CheckBox();
		alcoholNoCKB.setCaption("no");
		alcoholNoCKB.setImmediate(true);
		alcoholNoCKB.setWidth("-1px");
		alcoholNoCKB.setHeight("-1px");
		alcoholNoCKB.setRequired(true);
		mainLayout.addComponent(alcoholNoCKB, "top:20.0px;left:168.0px;");

		// drugsLB
		drugsLB = new Label();
		drugsLB.setImmediate(true);
		drugsLB.setWidth("-1px");
		drugsLB.setHeight("-1px");
		drugsLB.setValue("drugs");
		mainLayout.addComponent(drugsLB, "top:42.0px;left:40.0px;");

		// drugsYesCKB
		drugsYesCKB = new CheckBox();
		drugsYesCKB.setCaption("yes");
		drugsYesCKB.setImmediate(true);
		drugsYesCKB.setWidth("-1px");
		drugsYesCKB.setHeight("-1px");
		mainLayout.addComponent(drugsYesCKB, "top:40.0px;left:122.0px;");

		// drugsNoCKB
		drugsNoCKB = new CheckBox();
		drugsNoCKB.setCaption("no");
		drugsNoCKB.setImmediate(true);
		drugsNoCKB.setWidth("-1px");
		drugsNoCKB.setHeight("-1px");
		drugsNoCKB.setRequired(true);
		mainLayout.addComponent(drugsNoCKB, "top:40.0px;left:168.0px;");

		// therapyLB
		therapyLB = new Label();
		therapyLB.setImmediate(true);
		therapyLB.setWidth("80px");
		therapyLB.setHeight("-1px");
		therapyLB.setValue("therapy");
		mainLayout.addComponent(therapyLB, "top:362.0px;left:40.0px;");

		// therapyTA
		therapyTA = new TextArea();
		therapyTA.setImmediate(true);
		therapyTA.setWidth("100.0%");
		therapyTA.setHeight("100px");
		mainLayout.addComponent(therapyTA,
				"top:380.0px;right:12.0px;left:20.0px;");

		// therapyYesCKB
		therapyYesCKB = new CheckBox();
		therapyYesCKB.setCaption("yes");
		therapyYesCKB.setImmediate(true);
		therapyYesCKB.setWidth("46px");
		therapyYesCKB.setHeight("-1px");
		mainLayout.addComponent(therapyYesCKB, "top:20.0px;left:482.0px;");

		// therapyNoCKB
		therapyNoCKB = new CheckBox();
		therapyNoCKB.setCaption("no");
		therapyNoCKB.setImmediate(true);
		therapyNoCKB.setWidth("-1px");
		therapyNoCKB.setHeight("-1px");
		mainLayout.addComponent(therapyNoCKB, "top:20.0px;left:528.0px;");

		// acceptTherapyLB
		acceptTherapyLB = new Label();
		acceptTherapyLB.setImmediate(true);
		acceptTherapyLB.setWidth("100px");
		acceptTherapyLB.setHeight("-1px");
		acceptTherapyLB.setValue("acceptTherapy");
		mainLayout.addComponent(acceptTherapyLB, "top:20.0px;left:380.0px;");

		return mainLayout;
	}

}