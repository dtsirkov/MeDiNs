package web.forms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import web.beans.ComboxBean;
import web.beans.DiagnosisBean;
import web.classes.PropertyManager;
import web.views.AbstractView;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextArea;

import database.dao.DaoIntrfc;
import database.pojo.Diagnosis;

public class EditDiagnosisForm extends Form {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Label descriptionLB;
	@AutoGenerated
	private TextArea descriptionTA;
	@AutoGenerated
	private ComboBox nameCB;
	@AutoGenerated
	private Label nameLB;
	@AutoGenerated
	private ComboBox mkbCB;
	@AutoGenerated
	private Label mkbLB;
	private static final long serialVersionUID = 672684629757523660L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public EditDiagnosisForm() {

		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	public EditDiagnosisForm(AbstractView view, String label) {

		super(view, label, new AbsoluteLayout());
		setCompositionRoot(getLayout());

	}

	public Layout buildLayout(String mode) {

		//get propertyManager
		PropertyManager propertyManager = getPropertyManager();
		//get access to DB
		final DaoIntrfc dao = getDao();	

		//get main layout of the form
		Layout absoluteLayout = buildMainLayout();
		setLayout(absoluteLayout);
		setCompositionRoot(absoluteLayout);

		//get object that will be bind to the form
		final DiagnosisBean diagnosisBean;
		if(getData() != null && !mode.equals("create")){
			diagnosisBean = (DiagnosisBean)getData();
		}else{
			//set initial values
			diagnosisBean = new DiagnosisBean();
			diagnosisBean.setMkb("");
			diagnosisBean.setName("");
			diagnosisBean.setDescription("");
			setData(diagnosisBean);
		}	

		//manage labels
		mkbLB.setValue(propertyManager.getLabelDtl(mkbLB.getValue()));
		nameLB.setValue(propertyManager.getLabelDtl(nameLB.getValue()));
		descriptionLB.setValue(propertyManager.getLabelDtl(descriptionLB.getValue()));
		
		final BeanItemContainer<ComboxBean> container = new BeanItemContainer<ComboxBean>(ComboxBean.class);

		Diagnosis diagnosis = new Diagnosis();
		List<Object> allDiagnosis = dao.findByExample(diagnosis);
		allDiagnosis.size();

		List<ComboxBean> comboBoxList = new ArrayList<ComboxBean>();
		Iterator<Object> iterator = allDiagnosis.iterator();
		ComboxBean comboxBean, selectedComboxBean = null;
		while (iterator.hasNext()) {
			diagnosis = (Diagnosis)iterator.next();
			comboxBean = new ComboxBean(diagnosis.getMkb(), diagnosis.getName());
			comboBoxList.add(comboxBean);
			if(diagnosisBean.getMkb().equals(diagnosis.getMkb()))
				selectedComboxBean = comboxBean;
		}

		container.addAll(comboBoxList);

		mkbCB.setContainerDataSource(container);
		mkbCB.setItemCaptionPropertyId("value");
		mkbCB.setNullSelectionAllowed(false);
		mkbCB.setFilteringMode(FilteringMode.CONTAINS);
		
		nameCB.setContainerDataSource(container);
		nameCB.setItemCaptionPropertyId("label");
		nameCB.setNullSelectionAllowed(false);
		nameCB.setFilteringMode(FilteringMode.CONTAINS);

		descriptionTA.addStyleName("my-disabled");
		descriptionTA.setEnabled(false);

		//add listeners
		mkbCB.addValueChangeListener(new Property.ValueChangeListener() {

			private static final long serialVersionUID = -5135894766546022069L;

			public void valueChange(ValueChangeEvent event) {
				ComboxBean selection = (ComboxBean) event.getProperty().getValue();
				String mkb, description = "";
				Diagnosis diagnosis = new Diagnosis();
				if (selection != null){
					mkb = selection.getValue();
					diagnosisBean.setMkb(mkb);
					mkbCB.setData(selection);
					nameCB.select(selection);
					mkbCB.setComponentError(null);		

					diagnosis.setMkb(mkb);
					List<Object> diagnosisList = dao.findByExample(diagnosis); 
					diagnosis = (Diagnosis)diagnosisList.get(0);
					description = diagnosis.getDescription();
					diagnosisBean.setId(diagnosis.getId());
					dao.evict(diagnosis);

					descriptionTA.setEnabled(true);
					descriptionTA.setValue(description);
					descriptionTA.setEnabled(false);
					descriptionTA.setData(selection);

					diagnosisBean.setDescription(description);

				}
			}
		});

		nameCB.addValueChangeListener(new Property.ValueChangeListener() {

			private static final long serialVersionUID = -5781127624546929345L;

			public void valueChange(ValueChangeEvent event) {
				ComboxBean selection = (ComboxBean) event.getProperty().getValue();
				String name;
				if (selection != null){
					name = selection.getLabel();
					diagnosisBean.setName(name);
					nameCB.setData(selection);
					mkbCB.select(selection);
					mkbCB.setComponentError(null);		
				}
			}
		});

		//bind data
		mkbCB.setValue(selectedComboxBean);
		nameCB.setValue(selectedComboxBean);
		descriptionTA.setValue(diagnosisBean.getDescription() == null ? "" : diagnosisBean.getDescription());

		return absoluteLayout;

	}

	@Override
	public boolean process(HashMap<String, Form> steps) {
		return true;
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(true);
		mainLayout.setWidth("600px");
		mainLayout.setHeight("400px");
		
		// top-level component properties
		setWidth("600px");
		setHeight("400px");
		
		// mkbLB
		mkbLB = new Label();
		mkbLB.setImmediate(true);
		mkbLB.setWidth("180px");
		mkbLB.setHeight("-1px");
		mkbLB.setValue("mkb");
		mainLayout.addComponent(mkbLB, "top:20.0px;left:40.0px;");
		
		// mkbCB
		mkbCB = new ComboBox();
		mkbCB.setImmediate(true);
		mkbCB.setWidth("160px");
		mkbCB.setHeight("-1px");
		mainLayout.addComponent(mkbCB, "top:40.0px;left:20.0px;");
		
		// nameLB
		nameLB = new Label();
		nameLB.setImmediate(true);
		nameLB.setWidth("100.0%");
		nameLB.setHeight("-1px");
		nameLB.setValue("name");
		mainLayout
				.addComponent(nameLB, "top:80.0px;right:360.0px;left:40.0px;");
		
		// nameCB
		nameCB = new ComboBox();
		nameCB.setImmediate(true);
		nameCB.setWidth("560px");
		nameCB.setHeight("-1px");
		nameCB.setRequired(true);
		mainLayout.addComponent(nameCB, "top:100.0px;left:20.0px;");
		
		// descriptionTA
		descriptionTA = new TextArea();
		descriptionTA.setImmediate(true);
		descriptionTA.setWidth("562px");
		descriptionTA.setHeight("220px");
		mainLayout.addComponent(descriptionTA, "top:160.0px;left:21.0px;");
		
		// descriptionLB
		descriptionLB = new Label();
		descriptionLB.setImmediate(true);
		descriptionLB.setWidth("160px");
		descriptionLB.setHeight("-1px");
		descriptionLB.setValue("description");
		mainLayout.addComponent(descriptionLB, "top:140.0px;left:40.0px;");
		
		return mainLayout;
	}

}
