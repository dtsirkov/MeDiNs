package web;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import pojo_classes.Contacts;
import pojo_classes.EnumerationTypes;
import pojo_classes.Enumerations;
import property_pckg.ManageProperty;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Validator.EmptyValueException;
import com.vaadin.server.UserError;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.AbstractComponentContainer;
import com.vaadin.ui.AbstractField;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Layout;
import com.vaadin.ui.TextField;

import dao_classes.DaoImpl;
import dao_classes.DaoIntrfc;

public class ValidationForm extends CustomComponent{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout verticalLayout;

	/**
	 * 
	 */
	private static final long serialVersionUID = 8985294135487658005L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ValidationForm(String language) {

		buildFormLayout(language);
		setCompositionRoot(verticalLayout);


	}

	public ValidationForm(HashMap<String, CustomComponent> stepsHM, String language) {

		verticalLayout = new VerticalLayout();
		verticalLayout.setImmediate(true);
		verticalLayout.setSizeUndefined();	

		Object [] tmpStepsArray = stepsHM.keySet().toArray();
		Object [] stepsArray = new Object [tmpStepsArray.length];
		for(int i = 0; i < tmpStepsArray.length; i++){
			stepsArray[tmpStepsArray.length - i - 1] = tmpStepsArray[i];
		}

		String validationComponentTitle;
		CustomComponent stepComponent;
		for(int i = 0; i < stepsArray.length - 1; i++){
			validationComponentTitle = (String)stepsArray[i];
			stepComponent = (CustomComponent)stepsHM.get(validationComponentTitle);
			addValidationComponent(stepComponent, validationComponentTitle);
		}

		setCompositionRoot(verticalLayout);

	}

	private void buildFormLayout(String language) {

		verticalLayout = new VerticalLayout();
		verticalLayout.setImmediate(true);
		verticalLayout.setSizeUndefined();

	}

	public void addValidationComponent(CustomComponent stepComponent, String validationComponentTitle){

		Layout componentLayout = ((CustomComponentIntrfc)stepComponent).getMainLayout();

		int componentCount = componentLayout.getComponentCount();
		GridLayout grid = new GridLayout(1, componentCount + 1);
		grid.setWidth("400px");

		Label title = new Label(validationComponentTitle);
		title.setStyleName("validationCompenentTitle");
		title.setSizeUndefined();
		grid.addComponent(title);
		grid.setComponentAlignment(title, Alignment.MIDDLE_LEFT);

		Iterator<Component> iterator = componentLayout.iterator();
		AbstractComponent abstractComponent;
		Panel panel;
		String caption, value;
		Label captionLabel, valueLabel;
		TextArea area;
		
		BufferedImage bufferedImage = new BufferedImage(1, 1, BufferedImage.TYPE_4BYTE_ABGR_PRE);
		Graphics graphics = bufferedImage.getGraphics();
		FontMetrics metrics = graphics.getFontMetrics(graphics.getFont());
		graphics.dispose();

		while(iterator.hasNext()){	
			abstractComponent = (AbstractComponent)iterator.next();

			caption = abstractComponent.getCaption();
			//System.out.println(caption);
			captionLabel = new Label(caption);		
			panel = new Panel(caption);
			//panel.setWidth("400px");
			panel.setStyleName("validation_panel");

			if (abstractComponent.getData() != null){
				value = abstractComponent.getData().toString();                


				int valueWidth = metrics.charsWidth(value.toCharArray(), 0, value.length());

				//System.out.println(value);

				if (valueWidth < 400){
					valueLabel = new Label(value);
					valueLabel.setSizeUndefined();
					panel.setContent(valueLabel);
				}else{
					area = new TextArea();
					area.setValue(value);
					area.setWordwrap(true);
					area.setWidth(panel.getWidth() + panel.getWidthUnits().toString());
					area.setStyleName("validation_textarea");
					area.setReadOnly(true);
					panel.setContent(area);
				}
			}

			grid.addComponent(panel);
			grid.setComponentAlignment(panel, Alignment.MIDDLE_CENTER);

		}

		verticalLayout.addComponent(grid);

	}


}
