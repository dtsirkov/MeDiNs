package web;

import java.util.List;
import java.util.Map;

import pojo_classes.Contacts;
import pojo_classes.EnumerationTypes;
import pojo_classes.Enumerations;
import property_pckg.ManageProperty;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.server.VaadinRequest;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.TextField;

import dao_classes.DaoImpl;
import dao_classes.DaoIntrfc;

public class ContactForm extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private FormLayout formLayout;
	@AutoGenerated
	private TextField addressTF;
	@AutoGenerated
	private TextField zipCodeTF;
	@AutoGenerated
	private TextField cityTF;
	@AutoGenerated
	private ComboBox countryCB;
	@AutoGenerated
	private TextField phoneTF;
	@AutoGenerated
	private TextField mobileTF;
	@AutoGenerated
	private TextField emailTF;
	@AutoGenerated
	private ComboBox typeCB;
	@AutoGenerated
	private ComboBox activeCB;
	@AutoGenerated
	private ComboBox preferedCB;

	@AutoGenerated
	private Button personCancelBttn;
	@AutoGenerated
	private Button personCreateBttn;


	private Contacts contact;

	/**
	 * 
	 */
	private static final long serialVersionUID = 8985294135487658005L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ContactForm(VaadinRequest request) {

		String language = request.getLocale().getLanguage();
		//String language = "bg";

		buildFormLayout(language);
		setCompositionRoot(formLayout);

		contact = new Contacts();	
		final DaoIntrfc dao = new DaoImpl();

		//get enumerations 
		final Map<Enumerations, String> countryEnum = dao.getEnumeration("country", language);
		final Map<Enumerations, String> contactTypeEnum = dao.getEnumeration("contact type", language);
		final Map<Enumerations, String> contactActiveEnum = dao.getEnumeration("yes no", language);
		final Map<Enumerations, String> contactPreferedEnum = dao.getEnumeration("yes no", language);

		//add values in combo boxes
		countryCB.addItems(countryEnum.values().toArray());		
		typeCB.addItems(contactTypeEnum.values().toArray());		
		activeCB.addItems(contactActiveEnum.values().toArray());	
		preferedCB.addItems(contactPreferedEnum.values().toArray());

		//set initial values
		contact.setAddress("");
		contact.setCity("");
		contact.setCountry("");
		contact.setZip("");
		contact.setEmail("");
		contact.setPhone("");
		contact.setMobile("");

		String codeValue = "yes";
		String label = "";
		for (Map.Entry<Enumerations, String> entry : contactActiveEnum.entrySet()) {		
			if (codeValue.equals(entry.getKey().getCode())) {
				label = (String)entry.getValue();
				contact.setEnumerationsByActive(entry.getKey());
			}		
		}
		activeCB.select(label);

		/*
		String value = "Yes";
		Enumerations enumeration = new Enumerations();
		for (Map.Entry<Enumerations, String> entry : contactActiveEnum.entrySet()) {		
			if (value.equals(entry.getValue())) {
				enumeration = (Enumerations)entry.getKey();
			}		
		}		

		EnumerationTypes enumType = new EnumerationTypes();
		enumType = (EnumerationTypes)dao.findById("EnumerationTypes", "yes no");
		Enumerations enumeration = new Enumerations();
		enumeration.setCode("yes");
		//enumeration.setEnumerationTypes(enumType);
		List<Object> foundEnumLs = dao.findByExample(enumeration);	
		contact.setEnumerationsByActive((Enumerations)foundEnumLs.get(0));
		 */



		//bind data
		addressTF.setValue(contact.getAddress());
		zipCodeTF.setValue(contact.getZip());
		cityTF.setValue(contact.getCity());
		countryCB.setValue(contact.getCountry());
		phoneTF.setValue(contact.getPhone());
		mobileTF.setValue(contact.getMobile());
		emailTF.setValue(contact.getEmail());
		typeCB.setValue(contact.getEnumerationsByType());
		preferedCB.setValue(contact.getEnumerationsByPrefered());
		activeCB.setValue(contact.getEnumerationsByActive());


		//add listeners
		addressTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setAddress(event.getProperty().getValue().toString());
					}
				});

		zipCodeTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setZip(event.getProperty().getValue().toString());
					}
				});

		cityTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setCity(event.getProperty().getValue().toString());
					}
				});

		countryCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						String enumeration = "";
						for (Map.Entry<Enumerations, String> entry : countryEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = entry.getValue();
							}		
						}
						contact.setCountry(enumeration);
					}
				});

		phoneTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setPhone(event.getProperty().getValue().toString());
					}
				});

		mobileTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setMobile(event.getProperty().getValue().toString());
					}
				});

		emailTF.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						contact.setEmail(event.getProperty().getValue().toString());
					}
				});

		typeCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						Enumerations enumeration = new Enumerations();
						for (Map.Entry<Enumerations, String> entry : contactTypeEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = (Enumerations)entry.getKey();
							}		
						}
						contact.setEnumerationsByType(enumeration);
					}
				});

		/*
		activeCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						Enumerations enumeration = new Enumerations();
						for (Map.Entry<Enumerations, String> entry : contactActiveEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = (Enumerations)entry.getKey();
							}		
						}
						contact.setEnumerationsByActive(enumeration);
					}
				});
		 */

		preferedCB.addValueChangeListener(
				new Property.ValueChangeListener() {
					private static final long serialVersionUID = 1L;
					public void valueChange(ValueChangeEvent event) {
						String value = event.getProperty().getValue().toString();
						Enumerations enumeration = new Enumerations();
						for (Map.Entry<Enumerations, String> entry : contactPreferedEnum.entrySet()) {		
							if (value.equals(entry.getValue())) {
								enumeration = (Enumerations)entry.getKey();
							}		
						}
						contact.setEnumerationsByPrefered(enumeration);
					}
				});

		/*
		personCreateBttn.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;
			public void buttonClick(ClickEvent event) {

				dao.persist(person);

				personCreateBttn.setCaption("Created!");
			}
		});
		 */


	}

	public Contacts getContact() {
		return contact;
	}

	public void setContact(Contacts contact) {
		this.contact = contact;
	}

	@AutoGenerated
	private FormLayout buildFormLayout(String language) {

		//CustomValidator customValidator = new CustomValidator(language);	

		// common part: create formLayout
		formLayout = new FormLayout();
		formLayout.setImmediate(false);
		formLayout.setSizeUndefined();
		//formLayout.addStyleName("flexwrap");

		/*
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		 */

		// personCreateLb
		/*
		personCreateLb = new Label(ManageProperty.getLabelDtl("personCreate" + "_" + language));
		personCreateLb.setImmediate(true);
		formLayout.addComponent(personCreateLb);
		 */

		// addressTF
		addressTF = new TextField(ManageProperty.getLabelDtl("address" + "_" + language));
		addressTF.setImmediate(true);
		addressTF.setRequired(true);
		addressTF.setWidth("180px");
		addressTF.setHeight("-1px");
		formLayout.addComponent(addressTF);

		// zipCodeTF
		zipCodeTF = new TextField(ManageProperty.getLabelDtl("zip" + "_" + language));
		zipCodeTF.setImmediate(true);
		zipCodeTF.setInvalidAllowed(false);
		zipCodeTF.setRequired(true);
		zipCodeTF.setWidth("180px");
		zipCodeTF.setHeight("-1px");
		formLayout.addComponent(zipCodeTF);

		// cityTF
		cityTF = new TextField(ManageProperty.getLabelDtl("city" + "_" + language));
		cityTF.setImmediate(true);
		cityTF.setInvalidAllowed(false);
		cityTF.setRequired(true);
		cityTF.setWidth("180px");
		cityTF.setHeight("-1px");
		formLayout.addComponent(cityTF);		

		// countryCB
		countryCB = new ComboBox(ManageProperty.getLabelDtl("country" + "_" + language));
		countryCB.setImmediate(true);
		countryCB.setRequired(true);
		countryCB.setWidth("180px");
		countryCB.setHeight("-1px");
		formLayout.addComponent(countryCB);

		// phoneTF
		phoneTF = new TextField(ManageProperty.getLabelDtl("phone" + "_" + language));
		phoneTF.setImmediate(true);
		phoneTF.setInvalidAllowed(false);
		phoneTF.setRequired(true);
		phoneTF.setWidth("180px");
		phoneTF.setHeight("-1px");
		formLayout.addComponent(phoneTF);


		// mobileTF
		mobileTF = new TextField(ManageProperty.getLabelDtl("mobile" + "_" + language));
		mobileTF.setImmediate(true);
		mobileTF.setInvalidAllowed(false);
		mobileTF.setWidth("180px");
		mobileTF.setHeight("-1px");
		formLayout.addComponent(mobileTF);

		// emailTF
		emailTF = new TextField(ManageProperty.getLabelDtl("email" + "_" + language));
		emailTF.setImmediate(true);
		emailTF.setInvalidAllowed(false);
		emailTF.setRequired(true);
		emailTF.setWidth("180px");
		emailTF.setHeight("-1px");
		formLayout.addComponent(emailTF);

		// typeCB
		typeCB = new ComboBox(ManageProperty.getLabelDtl("contactType" + "_" + language));
		typeCB.setImmediate(true);
		typeCB.setInvalidAllowed(false);
		typeCB.setRequired(true);
		typeCB.setWidth("180px");
		typeCB.setHeight("-1px");
		formLayout.addComponent(typeCB);

		// activeCB
		activeCB = new ComboBox(ManageProperty.getLabelDtl("activeContact" + "_" + language));
		activeCB.setImmediate(true);
		activeCB.setInvalidAllowed(false);
		activeCB.setWidth("180px");
		activeCB.setHeight("-1px");
		activeCB.setEnabled(false);
		formLayout.addComponent(activeCB);

		// preferedCB
		preferedCB = new ComboBox(ManageProperty.getLabelDtl("preferedContact" + "_" + language));
		preferedCB.setImmediate(true);
		preferedCB.setRequired(true);
		preferedCB.setWidth("180px");
		preferedCB.setHeight("-1px");
		formLayout.addComponent(preferedCB);


		/*
		// personCreateBttn
		personCreateBttn = new Button(ManageProperty.getButtonDtl("personCreate" + "_" + language));
		personCreateBttn.setImmediate(true);
		formLayout.addComponent(personCreateBttn);


		// personCancelBttn
		personCancelBttn = new Button(ManageProperty.getButtonDtl("personCancel" + "_" + language));
		personCancelBttn.setImmediate(true);
		formLayout.addComponent(personCancelBttn);
		 */

		return formLayout;
	}

}
